// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhoneBook.Infrastructure.DAL;

#nullable disable

namespace PhoneBook.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(PhoneBookDbContext))]
    [Migration("20240807161705_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhoneBook.Application.Domain.City.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameGe")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SearchTerm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrelationId = "4ef09574-14ba-40a0-a1cd-361709cd8b6f",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(4958), new TimeSpan(0, 0, 0, 0, 0)),
                            NameEng = "Tbilisi",
                            NameGe = "თბილისი",
                            SearchTerm = "Tbilisiთბილისი"
                        },
                        new
                        {
                            Id = 2,
                            CorrelationId = "b199a83e-3d42-455a-8028-c68642b72c53",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(4997), new TimeSpan(0, 0, 0, 0, 0)),
                            NameEng = "Kutaisi",
                            NameGe = "ქუთაისი",
                            SearchTerm = "Kutaisiქუთაისი"
                        });
                });

            modelBuilder.Entity("PhoneBook.Application.Domain.Person.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchTerm")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonalNumber")
                        .IsUnique();

                    b.ToTable("People");
                });

            modelBuilder.Entity("PhoneBook.Application.Domain.PersonRelation.PersonRelationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PrimaryPersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelationType")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryPersonId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryPersonId");

                    b.HasIndex("SecondaryPersonId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("PhoneBook.Application.Domain.PhoneNumber.PhoneNumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberType")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("PhoneBook.Core.Localization.AppMeaningEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Lang")
                        .HasColumnType("tinyint");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("Meanings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrelationId = "298bbf76-099a-46b6-8640-8e70750b8fc5",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7359), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)1,
                            Meaning = "ქალაქი ვერ მოიძებნა",
                            WordId = 1
                        },
                        new
                        {
                            Id = 2,
                            CorrelationId = "65819af4-5211-4fb1-873f-32e3127e2b83",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7363), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)0,
                            Meaning = "city not found",
                            WordId = 1
                        },
                        new
                        {
                            Id = 3,
                            CorrelationId = "709c5783-1101-4e6c-839a-31721ec606fd",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7365), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)1,
                            Meaning = "ფიზიკური პირი ასეთი მონაცემებით უკვე არსებობს",
                            WordId = 2
                        },
                        new
                        {
                            Id = 4,
                            CorrelationId = "4685f2e1-b437-4e8b-8045-a414f14e84c7",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7377), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)0,
                            Meaning = "person with similar data already exists",
                            WordId = 2
                        },
                        new
                        {
                            Id = 5,
                            CorrelationId = "37233ece-a69c-49b2-a86d-c9d8cbe5340c",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7380), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)1,
                            Meaning = "ფიზიკური პირი ვერ მოიძებნა",
                            WordId = 3
                        },
                        new
                        {
                            Id = 6,
                            CorrelationId = "4032934b-5d91-457e-b22e-6adf304b5acf",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7382), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)0,
                            Meaning = "person not found",
                            WordId = 3
                        },
                        new
                        {
                            Id = 7,
                            CorrelationId = "5d641bc0-a990-4f96-9211-16f151be152e",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7384), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)1,
                            Meaning = "ასეთი კავშირი უკვე არსებობს",
                            WordId = 4
                        },
                        new
                        {
                            Id = 8,
                            CorrelationId = "8f711270-b55c-421c-821c-3a6dde0919c5",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7387), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)0,
                            Meaning = "similar relation already exists",
                            WordId = 4
                        },
                        new
                        {
                            Id = 9,
                            CorrelationId = "ebdbb1d8-0b55-4671-87b6-5fd68dc77306",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7389), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)1,
                            Meaning = "კავშირი ვერ მოიძება",
                            WordId = 5
                        },
                        new
                        {
                            Id = 10,
                            CorrelationId = "ec8e8759-e082-4b5e-a420-6b6b86dc6a2f",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7392), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)0,
                            Meaning = "relation not found",
                            WordId = 5
                        },
                        new
                        {
                            Id = 11,
                            CorrelationId = "3415f08e-dfc4-4e1e-8406-cea056fcfbd0",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7394), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)1,
                            Meaning = "ტელეფონის ნომერი უკვე არსებობს",
                            WordId = 6
                        },
                        new
                        {
                            Id = 12,
                            CorrelationId = "6a4dc351-1b58-41de-8c6b-62be488c7d83",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7399), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)0,
                            Meaning = "phone number already exists",
                            WordId = 6
                        },
                        new
                        {
                            Id = 13,
                            CorrelationId = "34b5e7fd-8b6f-472f-8cc8-c301b41e9707",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7401), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)1,
                            Meaning = "ტელეფონის ნომერი ვერ მოიძებნა",
                            WordId = 7
                        },
                        new
                        {
                            Id = 14,
                            CorrelationId = "19b586d2-b5a3-4b21-af26-ddf68f66fd7b",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 571, DateTimeKind.Unspecified).AddTicks(7404), new TimeSpan(0, 0, 0, 0, 0)),
                            Lang = (byte)0,
                            Meaning = "phone number not found",
                            WordId = 7
                        });
                });

            modelBuilder.Entity("PhoneBook.Core.Localization.AppWordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "er.city.not_found",
                            CorrelationId = "09bc29f6-67e4-446b-bfc0-7c8737dfdca0",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 574, DateTimeKind.Unspecified).AddTicks(8658), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            Code = "er.person.already_ext",
                            CorrelationId = "84caeef1-652f-419e-a0c7-e7b9d9d6cb77",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 574, DateTimeKind.Unspecified).AddTicks(8662), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            Code = "er.person.not_found",
                            CorrelationId = "c1343203-776c-4b79-8b51-9c12b0c70fe3",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 574, DateTimeKind.Unspecified).AddTicks(8664), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            Code = "er.pr.already_exist",
                            CorrelationId = "6869dd4d-360f-45f5-94d9-9d67b1431063",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 574, DateTimeKind.Unspecified).AddTicks(8667), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            Code = "er.pr.not_found",
                            CorrelationId = "3e0b26c8-ef52-4bfb-be17-7d349eb88c62",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 574, DateTimeKind.Unspecified).AddTicks(8669), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            Code = "er.pn.already_exist",
                            CorrelationId = "b8e9eb29-faba-49f1-9466-8fa122d5c856",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 574, DateTimeKind.Unspecified).AddTicks(8676), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            Code = "er.pn.not_found",
                            CorrelationId = "a6c1a3ac-0e74-4ba3-9cd7-1e1992029902",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 8, 7, 16, 17, 4, 574, DateTimeKind.Unspecified).AddTicks(8678), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("PhoneBook.Application.Domain.Person.PersonEntity", b =>
                {
                    b.HasOne("PhoneBook.Application.Domain.City.CityEntity", "City")
                        .WithMany("People")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PhoneBook.Application.Domain.PersonRelation.PersonRelationEntity", b =>
                {
                    b.HasOne("PhoneBook.Application.Domain.Person.PersonEntity", "PrimaryPerson")
                        .WithMany("PrimaryRelations")
                        .HasForeignKey("PrimaryPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PhoneBook.Application.Domain.Person.PersonEntity", "SecondaryPerson")
                        .WithMany("SecondaryRelations")
                        .HasForeignKey("SecondaryPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PrimaryPerson");

                    b.Navigation("SecondaryPerson");
                });

            modelBuilder.Entity("PhoneBook.Application.Domain.PhoneNumber.PhoneNumberEntity", b =>
                {
                    b.HasOne("PhoneBook.Application.Domain.Person.PersonEntity", "Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PhoneBook.Core.Localization.AppMeaningEntity", b =>
                {
                    b.HasOne("PhoneBook.Core.Localization.AppWordEntity", "Word")
                        .WithMany("Meanings")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("PhoneBook.Application.Domain.City.CityEntity", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("PhoneBook.Application.Domain.Person.PersonEntity", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("PrimaryRelations");

                    b.Navigation("SecondaryRelations");
                });

            modelBuilder.Entity("PhoneBook.Core.Localization.AppWordEntity", b =>
                {
                    b.Navigation("Meanings");
                });
#pragma warning restore 612, 618
        }
    }
}
